{"version":3,"file":"component---src-pages-using-typescript-tsx-19aa04688403407ec879.js","mappings":"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","sources":["webpack://roux-lab/./gatsby-config.js","webpack://roux-lab/./src/pages/using-typescript.tsx","webpack://roux-lab/./src/path-prefix.js","webpack://roux-lab/./src/components/nav.js","webpack://roux-lab/./src/components/header.js","webpack://roux-lab/./src/components/layout.js","webpack://roux-lab/./src/components/seo.js"],"sourcesContent":["/**\n * Configure your Gatsby site with this file.\n *\n * See: https://www.gatsbyjs.com/docs/reference/config-files/gatsby-config/\n */\n\n/**\n * @type {import('gatsby').GatsbyConfig}\n */\nmodule.exports = {\n  siteMetadata: {\n    title: `Roux Lab`,\n    description: `Beno√Æt Roux's research group at the University of Chicago.`,\n    author: `@kghaby`,\n    siteUrl: `https://kghaby.github.io/roux-lab/`,\n  },\n  pathPrefix: \"/roux-lab\",\n  plugins: [\n    `gatsby-plugin-image`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: `${__dirname}/src/images`,\n      },\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-sharp`,\n    `gatsby-plugin-typescript`,\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `Roux Lab`,\n        short_name: `RL`,\n        start_url: `/`,\n        background_color: `#8b7e7e`,\n        // This will impact how browsers show your PWA/website\n        // https://css-tricks.com/meta-theme-color-and-trickery/\n        theme_color: `#760000`,\n        display: `minimal-ui`,\n        icon: `src/images/protR_whitecircle.png`, // This path is relative to the root of the site.\n      },\n    },\n  ],\n}\n","// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  location,\n}) => (\n  <Layout>\n    <h1>\n      Gatsby supports <b>TypeScript by default</b>\n    </h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <code>typescript</code> via npm\n      and run <code>tsc --init</code> to create a <code>tsconfig</code> file.\n    </p>\n    <p>\n      You're currently on the page <code>{location.pathname}</code> which was\n      built on {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import config from \"../gatsby-config\";\n\nexport const pathPrefix = config.pathPrefix || \"\";\n","import React, { forwardRef } from \"react\";\nimport { Link } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\n\nimport { pathPrefix } from \"../path-prefix\";\nimport \"./nav.css\";\n\nconst Nav = forwardRef(({ className }, ref) => {\n  const location = useLocation();\n\n  // Remove pathPrefix from pathname so that github and local paths match\n  const pathWithoutPrefix = location.pathname.replace(new RegExp(`^${pathPrefix}`), '');\n\n  const isActive = (linkPath) => {\n    return pathWithoutPrefix.startsWith(linkPath);\n  };\n\n  return (\n    <nav className={className} ref={ref}>\n      <ul className=\"navList\">\n        <li className={pathWithoutPrefix === \"/\" ? \"activeLink\" : \"\"}>\n          <Link to=\"/\"><span className=\"textContent\">Home</span></Link>\n        </li>\n        <li className={isActive(\"/members\") ? \"activeLink\" : \"\"}>\n          <Link to=\"/members\"><span className=\"textContent\">Members</span></Link>\n        </li>\n        <li className={isActive(\"/research\") ? \"activeLink\" : \"\"}>\n          <Link to=\"/research\"><span className=\"textContent\">Research</span></Link>\n        </li>\n        <li className={isActive(\"/methods\") ? \"activeLink\" : \"\"}>\n          <Link to=\"/methods\"><span className=\"textContent\">Methods</span></Link>\n        </li>\n        {/* <li className={isActive(\"/publications\") ? \"activeLink\" : \"\"}>\n          <Link to=\"/publications\"><span className=\"textContent\">Publications</span></Link>\n        </li> */}\n        <li className={isActive(\"/publications\") ? \"activeLink\" : \"\"}>\n          <a href=\"https://scholar.google.com/citations?hl=en&user=hoGTGlMAAAAJ&view_op=list_works&sortby=pubdate\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <span className=\"textContent\">Publications</span>\n          </a>\n        </li>\n        <li className={isActive(\"/openings\") ? \"activeLink\" : \"\"}>\n          <Link to=\"/openings\"><span className=\"textContent\">Openings</span></Link>\n        </li>\n        <li className={isActive(\"/gallery\") ? \"activeLink\" : \"\"}>\n          <Link to=\"/gallery\"><span className=\"textContent\">Gallery</span></Link>\n        </li>\n        {/* <li className={isActive(\"/tools\") ? \"activeLink\" : \"\"}>\n          <Link to=\"/tools\"><span className=\"textContent\">Tools</span></Link>\n        </li> */}\n        <li className={isActive(\"/ulinks\") ? \"activeLink\" : \"\"}>\n          <Link to=\"/ulinks\"><span className=\"textContent\">Useful Links</span></Link>\n        </li>\n        <li className={isActive(\"/contacts\") ? \"activeLink\" : \"\"}>\n          <Link to=\"/contacts\"><span className=\"textContent\">Contacts</span></Link>\n        </li>\n      </ul>\n    </nav>\n  );\n});\n\nexport default Nav;\n\n\n\n\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { Link } from \"gatsby\";\nimport Nav from \"./nav.js\";\nimport \"./header.css\";\n\n//TODO: selection and current page like windows taskbar\n\nconst Header = ({ siteTitle }) => {\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [hasSmallWidth, setSmallWidth] = useState(false);\n  const headerRef = useRef(null);\n\n  useEffect(() => {\n    const handleResize = () => {\n      const maxNavHeaderWidth = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--max-navheader-width'));\n      setSmallWidth(window.innerWidth <= (maxNavHeaderWidth * parseFloat(getComputedStyle(document.documentElement).fontSize)));\n    };\n\n    handleResize(); // Set initial state\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  const handleKeyDown = (event) => {\n    if (event.key === \"Enter\" || event.key === \" \") {\n      setMenuOpen(!menuOpen);\n    }\n  };\n\n  const handleScroll = () => {\n    if (window.scrollY > 50) {\n      headerRef.current?.classList.add(\"scrolled\");\n    } else {\n      headerRef.current?.classList.remove(\"scrolled\");\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  return (\n    <>\n      <header className={`header`} ref={headerRef}>\n        <div className=\"container\">\n          <div className=\"logo\">\n            <Link to=\"/\" className={`siteTitle`}>\n              {siteTitle}\n            </Link>\n          </div>\n          {hasSmallWidth ? (\n            <div\n              className=\"menuToggle\"\n              onClick={() => setMenuOpen(!menuOpen)}\n              onKeyDown={handleKeyDown}\n              role=\"button\"\n              tabIndex={0}\n              aria-label=\"Toggle menu\"\n              aria-expanded={menuOpen}\n              // style={{ transform: menuOpen ? \"rotate(-180deg)\" : \"rotate(0)\" }}\n              // >\n              //   {'<'}\n            >\n              {menuOpen ? '>' : '<'}\n            </div>\n          ) : (\n            <Nav className={`navHeader`} />\n          )}\n        </div>\n      </header>\n      {hasSmallWidth && <Nav className={`navSide ${menuOpen ? 'open' : ''}`} />}\n    </>\n  );\n};\n\nexport default Header;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport React, { useEffect } from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Header from \"./header\";\nimport \"./layout.css\"; // Import the global styles\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          entry.target.classList.add('show');\n        } else {\n          entry.target.classList.remove('show');\n        }\n      });\n    });\n  \n    const hiddenElements = document.querySelectorAll('.hidden');\n    hiddenElements.forEach(element => observer.observe(element));\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return (\n    <div className=\"siteWrapper\">\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <main className=\"mainContent\">{children}</main>\n      <footer className=\"footer\">\n        <p>&copy; {new Date().getFullYear()} Roux Lab | University of Chicago</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default Layout;\n\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["module","exports","siteMetadata","title","description","author","siteUrl","pathPrefix","plugins","resolve","options","name","path","short_name","start_url","background_color","theme_color","display","icon","Head","React","Seo","_ref","data","location","Layout","pathname","site","buildTime","href","Link","to","config","forwardRef","ref","className","pathWithoutPrefix","useLocation","replace","RegExp","isActive","linkPath","startsWith","target","rel","siteTitle","menuOpen","setMenuOpen","useState","hasSmallWidth","setSmallWidth","headerRef","useRef","useEffect","handleResize","maxNavHeaderWidth","parseFloat","getComputedStyle","document","documentElement","getPropertyValue","window","innerWidth","fontSize","addEventListener","removeEventListener","handleScroll","_headerRef$current","_headerRef$current2","scrollY","current","classList","add","remove","onClick","onKeyDown","event","key","role","tabIndex","Nav","_data$site$siteMetada","children","useStaticQuery","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","querySelectorAll","element","observe","disconnect","Header","Date","getFullYear","_site$siteMetadata","_site$siteMetadata2","metaDescription","defaultTitle","content","property"],"sourceRoot":""}
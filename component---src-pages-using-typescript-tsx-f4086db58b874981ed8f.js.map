{"version":3,"file":"component---src-pages-using-typescript-tsx-f4086db58b874981ed8f.js","mappings":"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","sources":["webpack://roux-lab/./src/pages/using-typescript.tsx","webpack://roux-lab/./src/components/nav.js","webpack://roux-lab/./src/components/header.js","webpack://roux-lab/./src/components/layout.js","webpack://roux-lab/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  location,\n}) => (\n  <Layout>\n    <h1>\n      Gatsby supports <b>TypeScript by default</b>\n    </h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <code>typescript</code> via npm\n      and run <code>tsc --init</code> to create a <code>tsconfig</code> file.\n    </p>\n    <p>\n      You're currently on the page <code>{location.pathname}</code> which was\n      built on {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import React, { forwardRef } from \"react\";\nimport { Link } from \"gatsby\";\nimport \"./nav.css\";\n\nconst Nav = forwardRef(({ className }, ref) => (\n  <nav className={className} ref={ref}>\n    <ul className=\"nav-list\">\n      <li><Link to=\"/\">Home</Link></li>\n      <li><Link to=\"/members\">Members</Link></li>\n      <li><Link to=\"/research\">Research</Link></li>\n      <li><Link to=\"/methods\">Methods</Link></li>\n      <li><Link to=\"/publications\">Publications</Link></li>\n      <li><Link to=\"/openings\">Openings</Link></li>\n      <li><Link to=\"/gallery\">Gallery</Link></li>\n      <li><Link to=\"/tools\">Tools</Link></li>\n      <li><Link to=\"/useful-links\">Useful Links</Link></li>\n      <li><Link to=\"/contacts\">Contacts</Link></li>\n    </ul>\n  </nav>\n));\n\nexport default Nav;\n\n\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { Link } from \"gatsby\";\n// import { useLocation } from \"@reach/router\";\nimport Nav from \"./nav.js\";\nimport \"./header.css\";\n\nconst Header = ({ siteTitle }) => {\n  const [menuOpen, setMenuOpen] = useState(false);\n  const [hasSmallWidth, setSmallWidth] = useState(false);\n  const headerRef = useRef(null);\n  // const location = useLocation();\n\n  const handleKeyDown = (event) => {\n    if (event.key === \"Enter\" || event.key === \" \") {\n      setMenuOpen(!menuOpen);\n    }\n  };\n\n  const handleScroll = () => {\n    if (window.scrollY > 50) {\n      headerRef.current.classList.add(\"scrolled\");\n    } else {\n      headerRef.current.classList.remove(\"scrolled\");\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  useEffect(() => {\n    const handleResize = () => {\n      const maxNavHeaderWidth = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--max-navheader-width'));\n      setSmallWidth(window.innerWidth <= (maxNavHeaderWidth * parseFloat(getComputedStyle(document.documentElement).fontSize)));\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    handleResize(); // Set initial state\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  const isHomePage = false //location.pathname === \"/\";  // disabled for now \n\n  return (\n    <>\n      <header className={`header ${isHomePage ? \"animate-header\" : \"\"}`} ref={headerRef}>\n        <div className=\"container\">\n          <div className=\"logo\">\n            <Link to=\"/\" className={`site-title`}>\n              {siteTitle}\n            </Link>\n          </div>\n          {hasSmallWidth ? (\n            <div\n              className=\"menu-toggle\"\n              onClick={() => setMenuOpen(!menuOpen)}\n              onKeyDown={handleKeyDown}\n              role=\"button\"\n              tabIndex={0}\n              aria-label=\"Toggle menu\"\n              aria-expanded={menuOpen}\n            >\n              {menuOpen ? '>' : '<'}\n            </div>\n          ) : (\n            <Nav className={`nav-header`} />\n          )}\n        </div>\n      </header>\n      {hasSmallWidth && <Nav className={`nav-side ${menuOpen ? 'open' : ''}`} />}\n    </>\n  );\n};\n\nexport default Header;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport React, { useEffect } from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Header from \"./header\";\nimport \"./layout.css\"; // Import the global styles\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          entry.target.classList.add('show');\n        } else {\n          entry.target.classList.remove('show');\n        }\n      });\n    });\n  \n    const hiddenElements = document.querySelectorAll('.hidden');\n    hiddenElements.forEach(element => observer.observe(element));\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return (\n    <div className=\"site-wrapper\">\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <main className=\"main-content\">{children}</main>\n      <footer className=\"footer\">\n        <p>&copy; {new Date().getFullYear()} Roux Lab | University of Chicago</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default Layout;\n\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["Head","React","Seo","title","_ref","data","location","Layout","pathname","site","buildTime","href","Link","to","forwardRef","ref","className","siteTitle","menuOpen","setMenuOpen","useState","hasSmallWidth","setSmallWidth","headerRef","useRef","handleScroll","window","scrollY","current","classList","add","remove","useEffect","addEventListener","removeEventListener","handleResize","maxNavHeaderWidth","parseFloat","getComputedStyle","document","documentElement","getPropertyValue","innerWidth","fontSize","onClick","onKeyDown","event","key","role","tabIndex","Nav","_data$site$siteMetada","children","useStaticQuery","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","querySelectorAll","element","observe","disconnect","Header","siteMetadata","Date","getFullYear","_site$siteMetadata","_site$siteMetadata2","description","metaDescription","defaultTitle","name","content","property","author"],"sourceRoot":""}